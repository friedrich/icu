/*
*******************************************************************************
*   Copyright (C) 2012, International Business Machines
*   Corporation and others.  All Rights Reserved.
*******************************************************************************
*/

/*
 *  Generates a rounding mode chart.
 *
 *  To build, use  icurun   
 */

#include "unicode/unum.h"
#include "unicode/putil.h"
#include "unicode/uvernum.h"
#include <ctype.h>
#include <stdio.h>

#define ASSERTOK() if(U_FAILURE(status)) {fprintf(stderr,"%s:%d: Error: %s\n", __FILE__,__LINE__,u_errorName(status));return 1;}

#define RMLINK "http://userguide.icu-project.org/formatparse/numbers/rounding-modes"

#define MODE(x)   { x, #x, "" },

typedef struct {
  UNumberFormatRoundingMode mode;
  const char name[25];
  char testname[10];
} RoundTable;

RoundTable roundModes[] = {
  MODE(UNUM_ROUND_CEILING)
  MODE(UNUM_ROUND_FLOOR)
  MODE(UNUM_ROUND_DOWN)
  MODE(UNUM_ROUND_UP)
  MODE(UNUM_ROUND_HALFEVEN)
  MODE(UNUM_ROUND_HALFDOWN)
  MODE(UNUM_ROUND_HALFUP)
};

#define MODE_COUNT sizeof(roundModes)/sizeof(roundModes[0])


FILE *html = NULL;
FILE *test = NULL;


void hdr() {
  int m;
  fprintf(html,"<div class='roundhdr'>");
  fprintf(html,"<span class='roundnum'>#</span>");
  for(m=0 ;m<(int)(MODE_COUNT);m++) {
    fprintf(html,"<span class='roundtype'>%s</span>", roundModes[m].name+11);
  }
  fprintf(html,"<span class='roundnum'>#</span>");
  fprintf(html,"</div>\n");
}

int main() {
  UErrorCode status = U_ZERO_ERROR;
  UNumberFormat *nf = unum_open(UNUM_DECIMAL, NULL, -1, "en_CA", NULL, &status);
  int m,n;
  
  html = fopen("round.html","w");
  test = fopen("dcfmtest_round.txt","w");

  fprintf(test, "# %s\n", U_COPYRIGHT_STRING);
  fprintf(test, "# Test cases generated by icuapps/roundmode/roundmode.cpp on %s\n", U_ICU_VERSION);


  for(int i=0;i<(int)(MODE_COUNT);i++) {
    const char *p=roundModes[i].name+11;
    char *s = roundModes[i].testname;
    do {
      *(s++) = tolower(*p);
    } while(*(p++));
  }

  ASSERTOK();
  //unum_setAttribute(nf, UNUM_DECIMAL_ALWAYS_SHOWN, 1);
  unum_setAttribute(nf, UNUM_MAX_FRACTION_DIGITS, 0);
  unum_setAttribute(nf, UNUM_MIN_FRACTION_DIGITS, 0);

  fprintf(html,"<html><head><title>ICU Rounding Modes</title></head><body>\n");
  fprintf(html,"<!-- %s -->\n", U_COPYRIGHT_STRING);
  fprintf(html,"<h1>ICU %s <a href='%s'>Rounding Modes</a></h1>\n", U_ICU_VERSION, RMLINK);

  fprintf(html,"    <link rel=\"stylesheet\" type=\"text/css\" href=\"round.css\" />\n");

  fprintf(html,"<div class='roundtbl'>\n");

  
  fprintf(html,"<div class='roundrow roundblank'><span class='roundspacer roundnum'>&nbsp;</span></div>\n"); // spacer
  
  hdr();
  for(n=-20;n<=20;n++) {
      double d = n / 10.0;
      const char *specialClass ="";
      if((n%10)==5 || ((n%10)==-5) || n==0) {
        specialClass = "nx5";
      }
      char rowId[10];
      if(n<0) {
        sprintf(rowId,"m%02d",-n);
      } else {
        sprintf(rowId,"p%02d",n);
      }

      fprintf(html,"<div id='%s' class='roundrow %s'>",  rowId, specialClass);
      fprintf(html,"<span class='roundnum'><a href='#%s'>%.1f</a></span>", rowId, d);

      for(m=0 ;m<(int)(MODE_COUNT);m++) {
        UChar result[100];
        char str[100];
        char c0,c1;
        unum_setAttribute(nf, UNUM_ROUNDING_MODE, roundModes[m].mode);
        unum_formatDouble(nf, d, result, 100,0, &status);
        ASSERTOK();
        u_UCharsToChars(result,str,u_strlen(result)+1);
        if(str[0]=='-') {  // get the 2 significant digits
          c1=str[1]+2;
          c0='0'; // str[3];
        } else {
          c0=str[0];
          c1='0'; // str[2];
        }
        fprintf(html,"<span title='%s' class='n%c%c roundres'>%s</span>",roundModes[m].name, c0,c1,str); // class='n06'  0.6


        fprintf(test,"format 0 %-10s \"%.1f\" \"%s\"\n", roundModes[m].testname, d, str);
      }
      fprintf(html,"<span class='roundnum'><a href='#%s'>%.1f</a></span>", rowId, d);
      fprintf(html,"</div>\n");
  }
  hdr();
  fprintf(html,"</div>\n");

  fprintf(html, "<hr>See: <a href=\"%s\">Rounding Modes</a>.<br>%s\n", RMLINK, U_COPYRIGHT_STRING);

  fprintf(html, "</body></html>");
  
  unum_close(nf);
  fclose(html);
  fclose(test);

  return 0;
}

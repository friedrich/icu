//
//  main.cpp
//  itmpl2cpp
//
//  Copyright 2011 IBM Corporation and Others. All rights reserved.
//

#include <stdio.h>
#include "unicode/ustdio.h"
#include "unicode/regex.h"
#include "ItmlParser.h"
#include <string.h>

int main (int argc, const char * argv[])
{
    
    
    
    if(argc==1) {
        fprintf(stderr,"%s: Error: no files specified. Usage: %s file1 [ file2 ... ]\n", argv[0],argv[0]);
        
        return 1;
    }

    UFILE *out = u_finit(stdout,"utf-8",NULL);
    
    u_fprintf(out, "// Generated by itml2cpp. %s\n", U_COPYRIGHT_STRING);
    
    UErrorCode status = U_ZERO_ERROR;
    ItmlParser parser(status);

    
    for(int i=1;i<argc;i++) {
        char subname[200];
        
        const char *p;
        const char *q = NULL;
        
        subname[0]=0;
        p = strrchr(argv[i], '/');
        if(p) q=strchr(++p,'.');
        if(q) {
            strncpy(subname, p,q-p);
            subname[q-p]=0;
        }
        
        parser.addFile(subname, status);
        if(U_FAILURE(status)) {
            fprintf(stderr, "Failure in parser addfile: %s\n", u_errorName(status));
            return 5;
        }
        
    }

    if(U_FAILURE(status) || parser.prologue(out)) {
        fprintf(stderr, "Failure in parser setup or prologue: %s\n", u_errorName(status));
        return 5;
    }

    
    for(int i=1;i<argc;i++) {
        char subname[200];
        
        const char *p;
        const char *q = NULL;
       
        subname[0]=0;
        p = strrchr(argv[i], '/');
        if(p) q=strchr(++p,'.');
        if(q) {
            strncpy(subname, p,q-p);
            subname[q-p]=0;
        }
        
        
        fprintf(stderr, "# Processing file %s = %s\n", argv[i], subname);
        UnicodeString str;
        
        UFILE *uf = u_fopen(argv[i],"r","utf-8",NULL);
        
        if(!uf) {
            fprintf(stderr, "# Error opening file %s\n", argv[i]);
            return 2;
        }
        
       // u_fprintf(out, "#line 1 \"%s\"\n", argv[i]);
        
        UChar bigbuf[2048];
        
        while(u_fgets(bigbuf, 2048, uf)) {
            str.append(bigbuf);
        }
        
        u_fclose(uf);
        
        if(parser.parse(subname,str,out, status) || U_FAILURE(status)) {
            fprintf(stderr, "Failed to parse: %s\n", u_errorName(status));
            return 3;
        }
        
        
    }
    fprintf(stderr, "# OK.\n");
    
    if(parser.epilogue(out)) {
        return 9;
    }
    
    u_fflush(out);
    
    return 0;
}


## ******************************************************************************
## *
## *   Copyright (C) 1999-2014, International Business Machines
## *   Corporation and others.  All Rights Reserved.
## *
## *******************************************************************************
## Makefile.in for ICUapps - icuapps/locexp
## Steven  R. Loomis

srcdir=@srcdir@
top_srcdir=@top_srcdir@
## Build directory information
top_builddir = ..
subdir = locexp

RESDIR = resource
BLDRES = $(RESDIR).build
# srcdir must be set before this is included
include $(top_builddir)/icuapps.mk

SUBDIRS=tools util

## Target information
TARGET = locexp

LXOBJ = locexp.o lxrun.o lxconv.o lxdate.o lxlocale.o lxnum.o lxsort.o lxprint.o lxshow.o lxshowloc.o wfobject.o calexp.o srchexp.o lxbrk.o  version.o lxicir.o lxregion.o lxcgi.o
CGIOBJ = cgimain.o
# FCGIOBJ = fcgimain.o
OTHER_OBJECTS += $(LXOBJ) $(CGIOBJ) $(FCGIOBJ) $(LOCALOBJ)

# C Source files to extract FSWF strings from.  Remove items from here during development to not require a recompile.
FSWF_SRC= calexp.c cgimain.c fcgimain.c locexp.c lxconv.c lxdate.c lxlocale.c lxnum.c lxprint.c lxrun.c lxshow.cpp lxshowloc.c  srchexp.c wfobject.c  lxsort.c lxicir.c

# Add to OBJECTS for the following modules.
include $(top_srcdir)/usort/lib/usort.mk
include $(top_srcdir)/locexp/util/lxutil.mk
include $(top_srcdir)/apputil/apputil.mk

ALL_OBJECTS=$(OBJECTS) $(OTHER_OBJECTS)

DEPS = $(ALL_OBJECTS:.o=.d)

GENERATED_RSRC: $(RESDIR)/root.txt $(RESDIR)/root.txt.SAMPLE
BLDICURES_OPTS=-n locexp
RESMODE=static
## static mode
ifeq ($(RESMODE),static)
RESLIB=$(RESDIR)/liblocexp.a
LXLIBS=-L./$(BLDRES)/ -llocexp
BLDICURES_OPTS+=-m $(RESMODE)
else
$(error Unknown RESMODE: $(RESMODE))
endif


# We want to get the local copies of these files first, as the
# dependency. Even though they do get exported.
LDFLAGS += -L./$(RESDIR)/

# get the hostname the code is built on
CPPFLAGS := $(URLPREFIX) -DLXHOSTNAME=\"`hostname`\" -I../usort/lib -I./util $(CPPFLAGS) -DLXHOST=\"$(host)\"
CPPFLAGS += $(LXOPTIONS) -DLX_STATIC
CPPFLAGS += -I.
## List of phony targets
.PHONY : all all-local install install-local clean clean-local \
distclean distclean-local dist dist-local check check-local all-recursive \
 install-recursive clean-recursive distclean-recursive dist-recursive \
 distclean-recursive check-recursive build-rsrc

## List of standard targets
all: all-recursive all-local
install: install-recursive install-local

clean: clean-recursive clean-local
distclean : distclean-recursive distclean-local
dist: dist-recursive dist-local
check: check-recursive check-local

-include Makefile.local
CPPFLAGS += $(LOCAL_CPPFLAGS)


## Recursive targets
all-recursive install-recursive clean-recursive distclean-recursive dist-recursive check-recursive:
	@dot_seen=no; \
	target=`echo $@ | sed s/-recursive//`; \
	list='$(SUBDIRS)'; for subdir in $$list; do \
	  echo "Making $$target in $$subdir"; \
	  if test "$$subdir" = "."; then \
	    dot_seen=yes; \
	    local_target="$$target-local"; \
	  else \
	    local_target="$$target"; \
	  fi; \
	  (cd $$subdir && $(MAKE) $$local_target); \
	done; \
	if test "$$dot_seen" = "no"; then \
	  $(MAKE) "$$target-local" || exit 1; \
	fi


all-local: $(TARGET)

install-local: install-target


install-target: all-local
	$(MKINSTALLDIRS) $(bindir)
	$(INSTALL) $(TARGET) $(bindir)/$(TARGET)

dist-local:

clean-local:
	test -z "$(CLEANFILES)" || rm -f $(CLEANFILES)
	rm -f $(OBJECTS) $(TARGET)

distclean-local: clean-local
	rm -f Makefile $(DEPS)

check-local:

Makefile: $(srcdir)/Makefile.in  $(top_builddir)/config.status
	cd $(top_builddir) \
	 && CONFIG_FILES=$(subdir)/$@ CONFIG_HEADERS= $(SHELL) ./config.status

# ICULIBS includes all standard ICU libraries.
# if we wanted only part of the ICU, we could use (for example) just
#         '$(LIBS) -licuuc -lusort' ...

$(TARGET) : $(LXOBJ) $(CGIOBJ)  $(AHEADER) $(RESLIB) $(CEOBJS) $(LOCALOBJ) $(OBJECTS)
	-$(RMV) $(TARGET)
	$(CXX) -o $@ $(LOCALOBJ) $(CEOBJS) $(LXOBJ) $(CGIOBJ) $(OBJECTS) $(LXLIBS) $(LIBS) -llocexp $(LOCALLIBS) $(CXXFLAGS)

ifneq ($(MAKECMDGOALS),distclean)
-include $(DEPS)
endif

#
#   You can put your own settings for locale explorer
#   into a 'Makefile.local' file.  Lines starting with '###'
#   are suggestions.
#
#* URLPREFIX
#
#     Use this to set a custom URL prefix on things such as
#   gifs, etc.   Put the contents of html/ somewhere where
#   this URL can access them.   The example below would
#   construct a URL such as
#     /~srl/localeexplorer/closed.gif
#    ^^^^^^^
#
###     URLPREFIX=-DURLPREFIX=\"/~srl\"
#
#* LXOPTIONS
#
#
#  -DLX_SHOW_ALL_DISPLAY_LOCALES  - this will let you change LX's display
#                                   locale to ANY locale, not just implemented
#                                   ones. (this is the locale of it's UI)
#
#
#  -DLX_UBROWSE_PATH=\"path\"      - Path to the ubrowse CGI, ex:
#                                     /developerworks/opensource/icu/ubrowse
#
#  -DLX_NO_LOCALE_CHANGE           - disable changing of display locale
#
#  -DLX_USE_FONTED
#
#  -DLX_USE_CURRENCY           - make the 'currencypatterns demo' be a link
#                                    to oanda.com currency charts
#
#  -DLX_USE_TIMEZONE            Try to do timezone manipulation
#                            Also, add 'utimezon.o' to util/Makefile.in OBJECTS
#
###     LXOPTIONS +=    -DLX_SHOW_ALL_DISPLAY_LOCALES
#
#OR [to replace]
#
#   LXOPTIONS = -DLX_USE_FONTED
#  (standard options won't be used)


## EXPERIMENTAL - fastcgi localeexplorer

# install fast locale explorer
#  [kflx kills old instances, it's a Suid program]
iflx: flx
	$(INSTALL) flx $(bindir)/flx
	$(INSTALL) flx.sh $(bindir)/flx.sh
	chmod u+s $(bindir)/flx
	./kflx

# fast locale explorer itself
flx: $(LXOBJ) fcgimain.o
	$(CXX) -o $@ $^ $(CXXFLAGS) $(LIBS) -lfcgi

treetest:  test/treetest.o  $(LXOBJ) $(OBJECTS)
	$(CXX) -o $@ $^ $(CXXFLAGS) $(LIBS)

urltest:  test/urltest.o  $(LXOBJ) $(OBJECTS)
	$(CXX) -o $@ $^ $(CXXFLAGS) $(LIBS)

$(RESDIR)/root.txt: $(FSWF_SRC) $(RESDIR)/root.txt.inc tools/extractStrings.sh
	tools/extractStrings.sh $(FSWF_SRC) > $(RESDIR)/root.txt || ( rm -f $(RESDIR)/root.txt ; false )

$(RESDIR)/root.txt.SAMPLE: $(RESDIR)/root.txt
	echo "// Generated copy of root.txt. Also look at 'en.txt'." > $@
	cat < $@ >> $^

$(RESLIB): build-rsrc

build-rsrc: $(GENERATED_RSRC)
	-rm -rf $(BLDRES)
	$(BLDICURES_PY) $(BLDICURES_OPTS) -f $(RESDIR) -d $(BLDRES)

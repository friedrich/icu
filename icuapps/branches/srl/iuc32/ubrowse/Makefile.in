## ******************************************************************************
## *
## *   Copyright (C) 1999-2006, International Business Machines
## *   Corporation and others.  All Rights Reserved.
## *
## *******************************************************************************
## Makefile.in for ICU - ubrowse
## Steven  R. Loomis

srcdir=@srcdir@
top_srcdir=@top_srcdir@
## Build directory information
top_builddir = ..
subdir = ubrowse

# srcdir must be set before this is included
include $(top_builddir)/icuapps.mk

## Extra files to remove for 'make clean'
CLEANFILES = *~ README_$(PKG).txt $(PKG).*  *.res

## Target information
TARGET = ubrowse

LDFLAGS += -L../apputil -lapputil -L../locexp/util -liculxutil $(LDFLAGS_ICUIO)
CPPFLAGS += -I$(top_srcdir)/apputil
ICONS=icons

# ICULIBS includes all standard ICU libraries.
# if we wanted only part of the ICU, we could use (for example) just '$(LIBS) -licuuc -lusort' ...
# -ldl is needed for DLL version
#ICULIBS    +=  -lustdio 

# Want to make sure the usort.h dependency is not on the installed version .. 
CPPFLAGS  += -I../locexp/util

RES_OBJECTS= $(PKG)_dat.o

OUTOBJ=$(OUT)/$(PKG)_dat.o

OBJECTS = ubrowse.o icons.o $(OUTOBJ)

## res setup
PKG=ubrowseres
PKGMODE=static
OUT=tmp
PKGDIR=$(OUT)/$(PKG)
XLF=$(srcdir)/xlf
TXT=$(srcdir)/txt

## res def'n
resdatadir= $(libdir)/$(PACKAGE)/$(VERSION)/$(PKG)

STATIC_TXT=icons.txt root.txt res_index.txt
ALL_XLF=$(shell cd $(XLF) ; ls *.xlf | fgrep -v root.xlf)
SRC_XLF=$(ALL_XLF:%.xlf=$(XLF)/%.xlf)
ALL_TXT=$(ALL_XLF:%.xlf=$(TXT)/%.txt) $(STATIC_TXT)
ALL_RES=$(ALL_XLF:%.xlf=$(PKGDIR)/%.res) $(STATIC_TXT:%.txt=$(PKGDIR)/%.res)

ALL_RES_SHORT=$(ALL_XLF:%.xlf=%.res) $(STATIC_TXT:%.txt=%.res)

# C Source files to extract FSWF strings from.  Remove items from here during development to not require a recompile.  
FSWF_SRC= ubrowse.c

## List of standard targets
all: all-local
install: install-local
clean: clean-local
distclean : distclean-local
dist: dist-local
check: check-local

all-local: $(TARGET)

install-local: all-local install-target

prt-all-res:
	@echo $(ALL_RES)

install-target: all-local
	$(MKINSTALLDIRS) $(BINDIR) $(BINDIR)/data
	$(INSTALL) $(TARGET) $(BINDIR)/$(TARGET)
	$(INSTALL) ubrowse-header.html $(BINDIR)/data
#	$(INVOKE) $(PKGDATA) -I $(BINDIR)/../lib -p $(PKG)  -m $(PKGMODE) -c -d $(OUT) -T $(OUT) $(PKG).lst 

$(OUT) $(PKGDIR):
	$(MKINSTALLDIRS) $@

dist-local:

clean-local:
	@echo Calling pkgdata to cleanup. Ignore any errors.
	@-$(INVOKE) $(PKGDATA) -k -p $(PKG)  -m $(PKGMODE) -c -d $(OUT) -T $(OUT) $(PKG).lst 2>/dev/null
	test -z "$(CLEANFILES)" || rm -f $(CLEANFILES)
	-$(RMV) ./$(OUT)
	rm -f $(OBJECTS) $(TARGET)

distclean-local: clean-local
	rm -f Makefile $(DEPS)

check-local:

Makefile: $(srcdir)/Makefile.in  $(top_builddir)/config.status
	cd $(top_builddir) \
	 && CONFIG_FILES=$(subdir)/$@ CONFIG_HEADERS= $(SHELL) ./config.status

# ICULIBS includes all standard ICU libraries.
# if we wanted only part of the ICU, we could use (for example) just
#         '$(LIBS) -licuuc -lusort' ...

-include local.mk
-include Makefile.local


# Run against HTMLTidy
tidy: $(TARGET)
	$(UBROWSEOPTS) $(INVOKE) ./$(TARGET) | tail +3 > ubrowse.html
	tidy -utf8 -q ubrowse.html 2>&1 | sed -e "s%^ubrowse.html%"`pwd`"/ubrowse.html%g"

$(TARGET) : $(OBJECTS)
	$(LINK.c) -o $@ $^ $(ICULIBS)

$(PKGDIR)/%.res: $(TXT)/%.txt $(OUT) $(PKGDIR)
	$(INVOKE) $(GENRB) -s $(TXT) -d $(PKGDIR) $(<F)


$(TXT)/icons.txt: $(ICONS)/*.gif
	echo creating $@
	@echo "icons : table(nofallback) { " > $@
	@for file in `cd $(ICONS) ; ls *.gif`; do \
	  echo " $$file:import { ../$(ICONS)/$$file } " >> $@; \
	done;
	@echo "}" >> $@
	
$(TXT)/root.txt: $(FSWF_SRC) ../locexp/tools/extractStrings.sh
	$(INVOKE) PATH="../locexp/tools:$(bindir):$(sbindir):$(PATH)" extractStrings.sh $(FSWF_SRC) > $@ || ( rm -f $@ ; false )

$(XLF)/root.xlf: $(TXT)/root.txt
	@echo "$@ is out of date, run 'make update-root-xlf' to update!"
	
$(TXT)/%.txt: $(XLF)/%.xlf
	java -classpath $(ICU4J_CLASSES) com.ibm.icu.dev.tool.localeconverter.XLIFF2ICUConverter -s $(XLF) -d $(TXT) `basename $<`

update-root-xlf: $(TXT)/root.txt
	$(INVOKE) $(GENRB) -d"$(XLF)" -s"$(TXT)" root.txt -x 

$(OUT)/$(PKG).lst: $(OUT) Makefile.in	
	echo  > $@
	for file in $(ALL_RES_SHORT); do \
		echo $$file >> $@ ; \
	done;

$(OUTOBJ): $(OUT) $(OUT)/$(PKG).lst $(ALL_RES) 
	-rm -f $@
	-$(INVOKE) $(PKGDATA) -p $(PKG)  -m $(PKGMODE) -s $(OUT)/$(PKG) -v -c -d $(OUT) -T $(OUT) $(OUT)/$(PKG).lst

# why is this necessary?
$(shell pwd)/$(OUT)/$(RES_OBJECTS): $(OUTOBJ)
	@echo updated;
